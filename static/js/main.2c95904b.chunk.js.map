{"version":3,"sources":["components/home/loader.js","components/posts/postPreview.js","components/home/home.js","components/posts/commentDisplay.js","components/posts/PostDisplay.js","components/posts/post.js","components/error-page.js","Nav.js","App.js","serviceWorker.js","index.js"],"names":["Loader","className","Spinner","animation","variant","role","PostPreview","props","Card","style","width","Img","src","image","Body","Title","title","Text","timestamp","lastUpdate","Button","to","id","Home","useState","postList","setPostList","loader","setLoader","setError","useEffect","a","fetch","mode","response","ok","json","data","Error","getPostData","displayPosts","filter","post","published","map","postInfo","key","_id","Comment","author","content","PostDisplay","class","alt","postContent","onSubmit","handleCommentPost","htmlFor","name","value","commentAuthor","onChange","handleCommentChange","type","minLength","required","rows","commentContent","comments","comment","Post","match","setPostInfo","commentInfo","setCommentInfo","setCommentAuthor","setCommentContent","handleError","url","params","getCommentData","e","preventDefault","method","headers","body","JSON","stringify","concat","target","ErrorPage","Nav","Navbar","bg","Brand","App","basename","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2c95904b.chunk.js","sourcesContent":["//basically when page is fetching, show the loading screen bar\nimport React from 'react';\nimport Spinner from 'react-bootstrap/Spinner';\nimport './loader.css';\n\nconst Loader = () => {\n    return(\n        <div className =\"loading-container\">\n            <h1>Loading...</h1>\n            <Spinner animation=\"border\" variant=\"primary\" role=\"status\">\n            </Spinner>  \n        </div>\n        )\n}\n\nexport default Loader;","import React from 'react';\nimport Card from 'react-bootstrap/Card'\nimport Button from 'react-bootstrap/Button';\nimport { Link } from 'react-router-dom';\n\n\nconst PostPreview = (props) =>{\n    return(\n        <Card className=\"card-container\"style={{ width: '18rem' }}>\n            <Card.Img className=\"card-img\" variant=\"top\" src={props.image} />\n            <Card.Body className=\"card-body\">\n                <Card.Title>{props.title}</Card.Title>\n                <Card.Text>\n                    Posted on: {props.timestamp} | Last Edit : {props.lastUpdate}\n                </Card.Text>\n                <Button variant=\"link\" >\n                    <Link to={`/posts/${props.id}`}>View post</Link>\n                </Button> \n            </Card.Body>\n        </Card>\n    )\n}\n\n\n\nexport default PostPreview;","import React, { useEffect,useState } from 'react';\nimport Loader from './loader';\nimport PostPreview from '../posts/postPreview';\nimport './home.css';\n\n//homepage for the website, displays a preview of all of the posts\nconst Home = () =>{\n    const [postList,setPostList] = useState([]);\n    const [loader, setLoader] = useState(true);\n    const [error,setError] = useState(false);\n\n    const handleError = () => {\n        setError(true);\n        setPostList(null);\n    };\n\n    useEffect(()=>{\n        const getPostData = async() =>{\n            try{\n                setError(false); //might need to change this\n                const url = `https://vincephung-blog.glitch.me/api/posts`;\n                const response = await fetch(url, {mode: 'cors'});\n\n                if(response.ok){\n                    const data = await response.json();\n                    setPostList(data);\n                    setLoader(false);\n                    return data;\n                }else{\n                    handleError();\n                }\n            }catch(err){\n                throw new Error(err);\n            }\n        }\n        getPostData();\n    },[]);\n    const displayPosts = postList.filter((post)=>post.published);\n\n    return(\n        <div className = \"home-container\">\n            {(loader) ? <Loader /> : \"\"}\n            <h1 className=\"post-header\">Current posts</h1>\n            <div className =\"post-container\">\n                <div className=\"post\">\n                {displayPosts.map((postInfo)=>(\n                       <PostPreview \n                            title = {postInfo.title} \n                            key = {postInfo._id}\n                            timestamp = {postInfo.timestamp} \n                            lastUpdate = {postInfo.lastUpdate || 'Not edited'}\n                            image = {postInfo.image}\n                            id = {postInfo._id}\n                       />            \n                ))}\n                </div>\n            </div>\n        </div>\n    )\n\n\n}\n\nexport default Home;","import React from 'react';\nimport './post.css';\n\nconst Comment = (props) =>{\n    return(\n        <div className=\"commentContainer\">\n            <div className=\"singleComment\">\n                <h4 className=\"commentAuthor\">{props.author}</h4>\n                <p>{props.content}</p>\n                <p className=\"commentDate\">{props.timestamp}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Comment;","import React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport Comment from './commentDisplay';\nimport './post.css';\n\nconst PostDisplay = (props) => {\n  return (\n    <div className=\"postContainer\">\n      <div className=\"postSection\">\n        <h1 className=\"postTitle\">{props.title}</h1>\n        <hr />\n        <p className=\"postDate\">Posted on {props.timestamp}</p>\n        <hr />\n        <img class=\"post-img\" src={props.image} alt=\"post img\"></img>\n        <hr />\n        <p className=\"postContent\">{props.postContent}</p>\n        <hr />\n      </div>\n      <div className=\"commentForm\">\n        <Card>\n          <Card.Body>\n            <Card.Title>Leave a comment:</Card.Title>\n            <form className=\"form-group\" onSubmit={props.handleCommentPost}>\n              <label className=\"label\" htmlFor=\"name\">\n                Name:\n              </label>\n              <input\n                name=\"commentAuthor\"\n                value={props.commentAuthor}\n                onChange={props.handleCommentChange}\n                type=\"text\"\n                minLength=\"5\"\n                required\n              />\n              <hr />\n              <textarea\n                className=\"form-control\"\n                rows=\"3\"\n                name=\"content\"\n                value={props.commentContent}\n                onChange={props.handleCommentChange}\n                minLength=\"5\"\n                required\n              ></textarea>\n              <Button type=\"submit\" variant=\"primary\">\n                Post\n              </Button>\n            </form>\n          </Card.Body>\n        </Card>\n      </div>\n      <div className=\"commentSection\">\n        {props.comments.map((comment) => (\n          <Comment\n            author={comment.author}\n            key={comment._id}\n            content={comment.content}\n            timestamp={comment.timestamp}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default PostDisplay;\n","import React,{useState,useEffect} from 'react';\nimport Loader from '../home/loader';\nimport PostDisplay from './PostDisplay'\n\nconst Post = ({match}) =>{\n    const [postInfo,setPostInfo] = useState([]);\n    const [commentInfo,setCommentInfo] = useState([]);\n    const [commentAuthor,setCommentAuthor] = useState('');\n    const [commentContent,setCommentContent] = useState('');\n    const [loader, setLoader] = useState(true);\n    const [error,setError] = useState(false);\n\n    const handleError = () => {\n        setError(true);\n        setPostInfo(null);\n    };\n\n    useEffect(()=>{\n        const getPostData = async() =>{\n            try{\n                setError(false); //might need to change this\n                const url = `https://vincephung-blog.glitch.me/api/posts/${match.params.id}`;\n                const response = await fetch(url, {mode: 'cors'});\n\n                if(response.ok){\n                    const data = await response.json();\n\n                    setPostInfo(data);\n                    \n                    setLoader(false);\n                    return data;\n                }else{\n                    handleError();\n                }\n            }catch(err){\n                throw new Error(err);\n            }\n        }\n        getPostData();\n\n        const getCommentData = async() =>{\n            try{\n                setError(false); //might need to change this\n                const url = `https://vincephung-blog.glitch.me/api/posts/${match.params.id}/comments`;\n                const response = await fetch(url, {mode: 'cors'});\n\n                if(response.ok){\n                    const data = await response.json();\n                    setCommentInfo(data);\n\n                    setLoader(false);\n                    return data;\n                }else{\n                    handleError();\n                }\n            }catch(err){\n                throw new Error(err);\n            }\n        }\n        getCommentData();\n\n    },[match.params.id]);\n\n    const handleCommentPost = async(e) =>{\n        e.preventDefault();\n        //the body of the response needs to be \"author\" and \"content\"\n        let author = commentAuthor;\n        let content = commentContent;\n\n        const url = `https://vincephung-blog.glitch.me/api/posts/${match.params.id}/comments`;\n        const response = await fetch(url,\n            {   \n                mode:'cors',\n                method:'post',\n                headers:{'Content-Type': 'application/json'}, \n                body: JSON.stringify({author,content})\n            });\n            \n        const data = await response.json();\n        setCommentContent('');\n        setCommentAuthor('');\n        setCommentInfo(commentInfo.concat(data));\n    }\n    const handleCommentChange = (e) =>{\n        const {name} = e.target;\n        name === 'commentAuthor' ? setCommentAuthor(e.target.value) : setCommentContent(e.target.value);\n    }\n\n    return(\n        <div>\n            {(loader) ? <Loader /> : \"\"}\n            <PostDisplay \n                title = {postInfo.title}\n                timestamp = {postInfo.timestamp} \n                lastUpdate = {postInfo.lastUpdate || 'Not edited'}\n                image = {postInfo.image}\n                comments = {commentInfo}\n                postContent = {postInfo.content}\n                id = {postInfo._id}\n                handleCommentPost = {handleCommentPost}\n                handleCommentChange = {handleCommentChange}\n                commentAuthor = {commentAuthor}\n                commentContent = {commentContent}\n            />\n        </div>\n    )\n}\n\nexport default Post;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst ErrorPage = () =>{\n    return(\n        <div>\n            <h2 >\n                This page does not exist.\n                <Link to=\"/home\">Click this to go back to the homepage.</Link>\n            </h2>\n        </div>\n    )\n}\n\nexport default ErrorPage;","import React from 'react';\nimport Navbar from 'react-bootstrap/Navbar'\nimport { Link } from 'react-router-dom';\n\nconst Nav = () =>{\n    return(\n        <Navbar bg=\"dark\" variant=\"dark\">\n            <Navbar.Brand >\n                <Link to=\"/home\">Blog Home</Link>\n            </Navbar.Brand>\n        </Navbar>\n    )\n}\n\nexport default Nav","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Home from './components/home/home';\nimport Post from './components/posts/post';\nimport ErrorPage from './components/error-page';\nimport Nav from './Nav';\nimport  {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\n\nfunction App() {\n  return (\n    <Router basename=\"/blog-frontend\">\n      <Nav/>\n      <Switch>\n          <Route exact path=\"/home\" component={Home}/>\n          <Route exact path=\"/posts/:id\" component={Post}/>\n          <Route path='/' component={ErrorPage}/>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}